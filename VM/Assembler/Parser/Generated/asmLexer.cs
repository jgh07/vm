//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Source\Repos\jgh07\vm\VM\Assembler\Parser\asm.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VM.Assembler.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class asmLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NewLine=8, Ws=9, 
		Comment=10, OpCode=11, Include=12, Define=13, Identifier=14, DecimalDigit=15, 
		BinaryDigit=16, HexDigit=17, String=18, EscapeSequence=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "NewLine", "Ws", 
		"Comment", "OpCode", "Include", "Define", "Identifier", "DecimalDigit", 
		"BinaryDigit", "HexDigit", "String", "EscapeSequence"
	};


	public asmLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public asmLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'0b'", "'0x'", "'.'", "':'", "'%'", "','", null, null, null, 
		null, "'include'", "'define'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NewLine", "Ws", "Comment", 
		"OpCode", "Include", "Define", "Identifier", "DecimalDigit", "BinaryDigit", 
		"HexDigit", "String", "EscapeSequence"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "asm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static asmLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,214,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,59,8,7,1,8,4,8,62,
		8,8,11,8,12,8,63,1,8,1,8,1,9,1,9,5,9,70,8,9,10,9,12,9,73,9,9,1,9,4,9,76,
		8,9,11,9,12,9,77,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		160,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,13,3,13,178,8,13,1,13,5,13,181,8,13,10,13,12,13,184,9,13,
		1,14,1,14,1,15,1,15,1,16,3,16,191,8,16,1,17,1,17,1,17,5,17,196,8,17,10,
		17,12,17,199,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,3,18,213,8,18,1,71,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,31,2,
		0,66,66,98,98,2,0,88,88,120,120,4,0,10,10,13,13,133,133,8232,8233,2,0,
		9,9,32,32,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,82,
		82,114,114,2,0,69,69,101,101,2,0,84,84,116,116,2,0,72,72,104,104,2,0,76,
		76,108,108,2,0,65,65,97,97,2,0,68,68,100,100,2,0,83,83,115,115,2,0,85,
		85,117,117,2,0,77,77,109,109,2,0,73,73,105,105,2,0,86,86,118,118,2,0,74,
		74,106,106,2,0,81,81,113,113,2,0,67,67,99,99,2,0,71,71,103,103,2,0,87,
		87,119,119,2,0,70,70,102,102,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,65,70,97,102,6,0,10,10,13,13,34,
		34,92,92,133,133,8232,8233,249,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,
		0,3,41,1,0,0,0,5,44,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,13,
		53,1,0,0,0,15,58,1,0,0,0,17,61,1,0,0,0,19,67,1,0,0,0,21,159,1,0,0,0,23,
		161,1,0,0,0,25,169,1,0,0,0,27,177,1,0,0,0,29,185,1,0,0,0,31,187,1,0,0,
		0,33,190,1,0,0,0,35,192,1,0,0,0,37,212,1,0,0,0,39,40,5,36,0,0,40,2,1,0,
		0,0,41,42,5,48,0,0,42,43,7,0,0,0,43,4,1,0,0,0,44,45,5,48,0,0,45,46,7,1,
		0,0,46,6,1,0,0,0,47,48,5,46,0,0,48,8,1,0,0,0,49,50,5,58,0,0,50,10,1,0,
		0,0,51,52,5,37,0,0,52,12,1,0,0,0,53,54,5,44,0,0,54,14,1,0,0,0,55,56,5,
		13,0,0,56,59,5,10,0,0,57,59,7,2,0,0,58,55,1,0,0,0,58,57,1,0,0,0,59,16,
		1,0,0,0,60,62,7,3,0,0,61,60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,
		1,0,0,0,64,65,1,0,0,0,65,66,6,8,0,0,66,18,1,0,0,0,67,71,5,59,0,0,68,70,
		9,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,69,1,0,0,0,72,75,
		1,0,0,0,73,71,1,0,0,0,74,76,3,15,7,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,
		1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,80,6,9,0,0,80,20,1,0,0,0,81,82,
		7,4,0,0,82,83,7,5,0,0,83,160,7,6,0,0,84,85,7,7,0,0,85,86,7,8,0,0,86,160,
		7,9,0,0,87,88,7,10,0,0,88,89,7,11,0,0,89,160,7,9,0,0,90,91,7,12,0,0,91,
		92,7,13,0,0,92,160,7,13,0,0,93,94,7,14,0,0,94,95,7,15,0,0,95,160,7,0,0,
		0,96,97,7,16,0,0,97,98,7,15,0,0,98,160,7,11,0,0,99,100,7,13,0,0,100,101,
		7,17,0,0,101,160,7,18,0,0,102,103,7,14,0,0,103,104,7,10,0,0,104,160,7,
		11,0,0,105,106,7,14,0,0,106,107,7,10,0,0,107,160,7,7,0,0,108,109,7,19,
		0,0,109,110,7,16,0,0,110,160,7,6,0,0,111,112,7,0,0,0,112,113,7,8,0,0,113,
		160,7,20,0,0,114,115,7,4,0,0,115,116,7,5,0,0,116,160,7,9,0,0,117,118,7,
		12,0,0,118,119,7,4,0,0,119,160,7,13,0,0,120,121,7,5,0,0,121,160,7,7,0,
		0,122,123,7,21,0,0,123,124,7,8,0,0,124,160,7,20,0,0,125,126,7,21,0,0,126,
		127,7,22,0,0,127,160,7,9,0,0,128,129,7,21,0,0,129,130,7,11,0,0,130,160,
		7,9,0,0,131,132,7,1,0,0,132,133,7,5,0,0,133,160,7,7,0,0,134,135,7,14,0,
		0,135,136,7,9,0,0,136,160,7,7,0,0,137,138,7,7,0,0,138,139,7,8,0,0,139,
		160,7,16,0,0,140,141,7,21,0,0,141,142,7,4,0,0,142,160,7,18,0,0,143,144,
		7,14,0,0,144,145,7,23,0,0,145,160,7,6,0,0,146,147,7,21,0,0,147,148,7,12,
		0,0,148,149,7,11,0,0,149,160,7,11,0,0,150,151,7,7,0,0,151,152,7,9,0,0,
		152,160,7,21,0,0,153,154,7,13,0,0,154,155,7,24,0,0,155,160,7,21,0,0,156,
		157,7,17,0,0,157,158,7,4,0,0,158,160,7,9,0,0,159,81,1,0,0,0,159,84,1,0,
		0,0,159,87,1,0,0,0,159,90,1,0,0,0,159,93,1,0,0,0,159,96,1,0,0,0,159,99,
		1,0,0,0,159,102,1,0,0,0,159,105,1,0,0,0,159,108,1,0,0,0,159,111,1,0,0,
		0,159,114,1,0,0,0,159,117,1,0,0,0,159,120,1,0,0,0,159,122,1,0,0,0,159,
		125,1,0,0,0,159,128,1,0,0,0,159,131,1,0,0,0,159,134,1,0,0,0,159,137,1,
		0,0,0,159,140,1,0,0,0,159,143,1,0,0,0,159,146,1,0,0,0,159,150,1,0,0,0,
		159,153,1,0,0,0,159,156,1,0,0,0,160,22,1,0,0,0,161,162,7,17,0,0,162,163,
		7,4,0,0,163,164,7,21,0,0,164,165,7,11,0,0,165,166,7,15,0,0,166,167,7,13,
		0,0,167,168,7,8,0,0,168,24,1,0,0,0,169,170,7,13,0,0,170,171,7,8,0,0,171,
		172,7,24,0,0,172,173,7,17,0,0,173,174,7,4,0,0,174,175,7,8,0,0,175,26,1,
		0,0,0,176,178,7,25,0,0,177,176,1,0,0,0,178,182,1,0,0,0,179,181,7,26,0,
		0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		28,1,0,0,0,184,182,1,0,0,0,185,186,7,27,0,0,186,30,1,0,0,0,187,188,7,28,
		0,0,188,32,1,0,0,0,189,191,7,29,0,0,190,189,1,0,0,0,191,34,1,0,0,0,192,
		197,5,34,0,0,193,196,8,30,0,0,194,196,3,37,18,0,195,193,1,0,0,0,195,194,
		1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,
		0,199,197,1,0,0,0,200,201,5,34,0,0,201,36,1,0,0,0,202,203,5,92,0,0,203,
		213,5,92,0,0,204,205,5,92,0,0,205,213,7,7,0,0,206,207,5,92,0,0,207,213,
		7,4,0,0,208,209,5,92,0,0,209,213,5,34,0,0,210,211,5,92,0,0,211,213,7,0,
		0,0,212,202,1,0,0,0,212,204,1,0,0,0,212,206,1,0,0,0,212,208,1,0,0,0,212,
		210,1,0,0,0,213,38,1,0,0,0,13,0,58,63,71,77,159,177,180,182,190,195,197,
		212,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace VM.Assembler.Parser
