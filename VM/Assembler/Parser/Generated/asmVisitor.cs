//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Source\Repos\jgh07\vm\VM\Assembler\Parser\asm.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VM.Assembler.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="asmParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IasmVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.global_include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobal_include([NotNull] asmParser.Global_includeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.constant_definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant_definition([NotNull] asmParser.Constant_definitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] asmParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>decimal_literal</c>
	/// labeled alternative in <see cref="asmParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecimal_literal([NotNull] asmParser.Decimal_literalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binary_literal</c>
	/// labeled alternative in <see cref="asmParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinary_literal([NotNull] asmParser.Binary_literalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>hex_literal</c>
	/// labeled alternative in <see cref="asmParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHex_literal([NotNull] asmParser.Hex_literalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>decimal_float</c>
	/// labeled alternative in <see cref="asmParser.floating_point_number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecimal_float([NotNull] asmParser.Decimal_floatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binary_float</c>
	/// labeled alternative in <see cref="asmParser.floating_point_number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinary_float([NotNull] asmParser.Binary_floatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>hex_float</c>
	/// labeled alternative in <see cref="asmParser.floating_point_number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHex_float([NotNull] asmParser.Hex_floatContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperand([NotNull] asmParser.OperandContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLabel([NotNull] asmParser.LabelContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.line_number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine_number([NotNull] asmParser.Line_numberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.instruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstruction([NotNull] asmParser.InstructionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.include"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInclude([NotNull] asmParser.IncludeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="asmParser.compilation_unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompilation_unit([NotNull] asmParser.Compilation_unitContext context);
}
} // namespace VM.Assembler.Parser
